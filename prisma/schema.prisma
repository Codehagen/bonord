generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id                  String     @id @default(cuid())
  name                String?
  email               String?    @unique
  emailVerified       DateTime?
  credits             Int        @default(3)
  image               String?
  language            String?    @default("english")
  onboardingEmailSent Boolean    @default(false)
  createdAt           DateTime   @default(now()) @map(name: "created_at")
  updatedAt           DateTime   @default(now()) @map(name: "updated_at")
  accounts            Account[]
  sessions            Session[]
  properties          Property[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

enum PropertyStatus {
  NOT_STARTED
  IN_PROGRESS
  DONE
  CANCELED
}

enum PropertyLabel {
  APARTMENT
  HOUSE
  CABIN
  PROPERTY
}

model Property {
  id                  String         @id @default(cuid())
  address             String
  description         String? // Optional field
  status              PropertyStatus @default(NOT_STARTED)
  label               PropertyLabel  @default(PROPERTY) // Add the label field
  jsonDescription     Json?
  detailedDescription String?        @db.Text
  p_rom               String? // Optional field
  bra                 String? // Optional field
  soverom             String? // Optional field
  pris                String? // Optional field
  takst_text          String? // Optional field
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  images              Image[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@index([userId]) // Add this index
  @@map(name: "properties")
}

model Image {
  id             String   @id @default(cuid())
  url            String
  description    String?
  option1        String?  @db.VarChar(500)
  option2        String?  @db.VarChar(500)
  option3        String?  @db.VarChar(500)
  selectedOption String?  @db.VarChar(500)
  retryCount     Int      @default(0)
  property       Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId     String

  @@index([propertyId]) // Add this index
  @@map(name: "images")
}

//if we need full reset :  npx prisma db push --force-reset
